[
	{
		"num": 1,
		"title": "Welcome to Python!",
		"visible": true,
		"days": [
			{
				"title": "Welcome to Python",
				"date": "2017-04-04",
				"active": false,
				"description": "Hello world! Welcome to CS41. Topics covered: why take CS41, history and context of Python, zen and philosophy of Python, who uses Python, and lots of Python basics (using the interpreter, comments, variables, types, numbers, math, booleans, logic, strings, lists, slicing, console I/O, control flow, loops, range, functions)"
			},
			{
				"title": "Python Fundamentals",
				"date": "2017-04-06",
				"active": false,
				"description": "Our rapid progression through Python fundamentals continues, covering: objects, variables, and types, duck typing, equality vs. identity testing, additional useful string methods, string formatting (using .format(), file I/O (using a context manager), running Python as a script, and the basics of imports. The remainder of class was used to set up (and troubleshoot) Python installations, as well as start work on Lab 1."
			}
		],
		"dates": {
			"start": "2017-04-02",
			"end": "2017-04-08"
		}
	},
	{
		"num": 2,
		"title": "Data Structures",
		"visible": true,
		"days": [
			{
				"title": "Intro to Data Structures",
				"date": "2017-04-11",
				"active": false,
				"description": "Python's numerous tools for data manipulation makes life easy for programmers. Together with a review of lists from last week, we'll see dictionaries, tuples, and sets, along with all of their common operators and even a few uncommon ones. We briefly look at a few looping techniques (enumerate, zip), and then dive into comprehensions. Python allows us to write list, dictionary, and set comprehensions, and we'll explore these tools as well as their connection to higher-level reasoning about problem-solving."
			},
			{
				"title": "Data Structures Lab",
				"date": "2017-04-13",
				"active": false,
				"description": "The first full-length lab of CS41 features a wide collection of small problems, chosen to practice the many, many topics covered in the first three days of lecture and solidify concepts that may not have been absorbed on the first pass."
			}
		],
		"dates": {
			"start": "2017-04-09",
			"end": "2017-04-15"
		}
	},
	{
		"num": 3,
		"title": "Functions",
		"visible": true,
		"days": [
			{
				"title": "Functions",
				"date": "2017-04-18",
				"active": false,
				"description": "We've seen functions in other languages, but Python gives us additional tools in defining and calling functions. After reviewing some nuances in the function execution model regarding return values, scope, and pass-by semantics, we'll see keyword arguments alongside their familiar positional counterparts. We'll discuss variadic positional arguments and variadic keyword arguments, and their relation to str.format. Lastly, we peek into an odd quirk of Python - that functions are indeed objects, and can be treated as such."
			},
			{
				"title": "Functions Lab",
				"date": "2017-04-20",
				"active": false,
				"description": "This lab first drills function argument rules, then asks you to write functions utilizing the new superpowers offered by Python functions. Several function nuances are covered, including the danger of mutable default values. The lab closes with a thorough investigation of function objects and their attributes, at least in CPython."
			}
		],
		"dates": {
			"start": "2017-04-16",
			"end": "2017-04-22"
		}
	},
	{
		"num": 4,
		"title": "Functional Programming",
		"visible": true,
		"days": [
			{
				"title": "Functional Programming",
				"date": "2017-04-25",
				"active": false,
				"description": "This is, by far, my favorite lecture to give. We first discuss functional programming's place in the landscape of programming paradigms - what makes this different from Java and C++ - and then introduce the concept of higher-order functions through map and filter, and anonymous lambda functions. We'll understand iterators, generator expressions, and generators as core ideas in functional programming, and briefly talk about where these tools could show up in Python. Lastly, we'll go over decorators - an amazing application of functional programming ideas to solve common programming problems."
			},
			{
				"title": "Functional Programming Lab",
				"date": "2017-04-27",
				"active": false,
				"description": "Practice with map, filter, and lambda, and then explore functools.reduce and the operator module for more depth. As a thought experiment, we briefly discuss how to convert iterative Python code to functional code, and then practice with iterators and generators, using the itertools module to build power operators from linear algebra in under ten lines of Python. Closure semantics are also reviewed as a preview for the main event - writing decorators!"
			}
		],
		"dates": {
			"start": "2017-04-23",
			"end": "2017-04-29"
		}
	},
	{
		"num": 5,
		"title": "Object-Oriented Python",
		"visible": true,
		"days": [
			{
				"title": "Object-Oriented Python",
				"date": "2017-05-02",
				"active": false,
				"description": "After last week's foray into FP, we're back in the comfortable land of OOP, covering: differences between class objects and instance objects, how attribute resolution works, methods vs. functions, single and multiple inheritance, as well as 'magic' dunderbar methods in Python for operator overloading, with an emphasis on masquerading as builtin types. In the latter half of class, we'll explore the hierarchy of Exceptions, and then cover proper exceptional control flow using try/except/else/finally."
			},
			{
				"title": "OOP Lab",
				"date": "2017-05-04",
				"active": false,
				"description": "After seeing mostly conceptual rules and definitions in lecture, this lab will focus more on writing code and building classes to solve a variety of problems. We'll also briefly look at exceptions and practice good exceptional control flow."
			}
		],
		"dates": {
			"start": "2017-04-30",
			"end": "2017-05-06"
		}
	},
	{
		"num": 6,
		"title": "The Python Standard Library",
		"visible": true,
		"days": [
			{
				"title": "The Python Standard Library",
				"date": "2017-05-09",
				"active": false,
				"description": "Survey of the utilities provided by the Python standard library, including sys, re, collections, random, itertools, and many, many more. These slides are intended as reference material to anyone interested in seeing the power and breadth of the standard library."
			},
			{
				"title": "Standard Library Lab",
				"date": "2017-05-11",
				"active": false,
				"description": "The first half, and perhaps all, of this lab is dedicated to reading the documentation of the standard library. The reference material is well-written, and it would be impossible to address everyone's interests with one lab. Instead, students direct their own learning by reviewing the modules they find personally fascinating. The remainder of the lab gives practice with the common standard library modules for those who need it."
			}
		],
		"dates": {
			"start": "2017-05-07",
			"end": "2017-05-13"
		}
	},
	{
		"num": 7,
		"title": "Third-Party Tools",
		"visible": true,
		"days": [
			{
				"title": "Third-Party Tools",
				"date": "2017-05-16",
				"active": false,
				"description": "Survey of the most common 3rd party packages in use. These include: requests, numpy/scipy, matplotlib/pyplot, pandas, pillow, flask/django/twisted, pep8, scikit-learn/nltk, stanford-corenlp, bcrypt, beatifulsoup, and more."
			},
			{
				"title": "Third-Party Tools Lab",
				"date": "2017-05-18",
				"active": false,
				"description": "Experiment with some of the 3rd party tools discussed in lecture. In particular, you'll choose one or two of the packages that most interest you and go into a deep dive, walking through the developer's tutorial pages and getting practical experience with those particular tools."
			}
		],
		"dates": {
			"start": "2017-05-14",
			"end": "2017-05-20"
		}
	},
	{
		"num": 8,
		"title": "The Python Ecosystem",
		"visible": false,
		"days": [
			{
				"title": "The Python Ecosystem",
				"date": "2017-05-23",
				"active": false,
				"description": "A conceptual overview of the state of the Python ecosystem, focusing on the differences between Python 2 and Python 3. This is a light lecture, and should leave time at the end to work on projects."
			},
			{
				"title": "Final Project Work Sesh",
				"date": "2017-05-25",
				"active": false,
				"description": "Get going on your final projects and proposals! Now is better than never, and the course staff will be floating around to suggest helpful tools or answer any questions about getting started."
			}
		],
		"dates": {
			"start": "2017-05-21",
			"end": "2017-05-27"
		}
	},
	{
		"num": 9,
		"title": "Advanced Topics",
		"visible": true,
		"days": [
			{
				"title": "Advanced Topics",
				"date": "2017-05-30",
				"active": true,
				"description": "Any advanced topics in Python that the class finds interesting. Possible topics include: optimizations, web app development, practical data science, or anything else. Check the poll on Piazza for more information!"
			},
			{
				"title": "Final Project Work Sesh",
				"date": "2017-06-01",
				"active": false,
				"description": "Work time for final projects. At this point, you should be through most of your major milestones. The course staff will, as always, be around to help debug any problems or suggest extensions."
			}
		],
		"dates": {
			"start": "2017-05-28",
			"end": "2017-06-03"
		}
	},
	{
		"num": 10,
		"title": "Final Projects",
		"visible": false,
		"days": [
			{
				"title": "Top Presentations, Party, Python Bee",
				"date": "2017-06-06",
				"active": false,
				"description": "The top few groups will briefly present and demo their projects, and then we'll celebrate the end of the quarter with a pizza party and Python bee! What is a Python bee? It's like a spelling bee... but better. Come to find out more!"
			},
			{
				"title": "Dead Day",
				"date": "2017-06-08",
				"active": false,
				"description": "No class. Good luck on finals!"
			}
		],
		"dates": {
			"start": "2017-06-04",
			"end": "2017-06-10"
		}
	}
]